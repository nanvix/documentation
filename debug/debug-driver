
                           HOW TO USE THE DEBUG-DRIVER

=========================
I. Driver presentation
=========================

Nanvix implements a debug-driver (src/kernel/debug), which will be initialized 
only by selecting debug-mode in GRUB boot menu. 
Then, each component can register debug function to this driver. 
Just before end of boot, registered functions are executed, 
then standard boot is resumed if each one were successful, and a kpanic is raised otherwise

This drivers contains 3 main functions + 3 statistics functions: 

    - void dbg_init(void): 
        This function is called by kmain only if debug-mode had been selected in GRUB boot menu. 
        If it's not executed (i.e. boot mode is standard mode), all functions of the driver will be skipped. 

    - void dbg_register(debug_fn fn, char *fn_name): 
        Each component has to call this function to register a test function. 
        First parameter is a pointer on the function to register, which has to have a skeleton suiting debug_fn 
        (i.e. return void and don't require any parameters) and second one is the name of this function. 
        Name is important in order to make clear errors on failure.

            | Example of call:
            | dev.c implements a test for character devices named cdev_test 
            | To register, it has to do: 
            |     dbg_register(cdev_test, "cdev_test"); 
            | in function dev_init 

    - void dbg_execute(void): 
        This function is called by kmain, and will execute all registered functions. 
        It also prints statistics, and raises a kpanic if one or more functions fails 
        (because failed debug-functions could create instabilities in the system). 
        Otherwise, it waits for user to press Enter, then resume standard boot

    - void tst_passed(void), void tst_failed(void), void tst_skipped(void): 
        Used for statistics, one and only one has to be called within each debugging function

===========================================
II. How to write new debugging-functions
===========================================

Detailled examples are already implemented in nanvix, like in files dev.c, region.c, klog.c...

But here's some tips for new debugging-functions: 

    - Try to call dbg_register in the file where tests are implemented, in order to avoid useless
      includes (because debug.h has to be included in these files) 

    - Create a test main function, which returns void and takes no parameters (mandatory to be a debug_fn). 
      In this function, just call sub-functions 1 by 1. 
      These subfunctions should return 1 on success and 0 on failure. 
      That way, test main function just has to execute tests, if one fails just do: 
          tst_failed(); return;
      and is all are successful, call tst_passed before last return. 

    - Test sub-functions should test a really specific thing, 
      and use log_level when calling kprintf makes logs easier to read.
      It's possible to use kprintf with log_levels as warnings, errors, infos (detailed list is in klib.h).
      Whenever something went wrong, use imediately:
            kprintf([KERN_LOG_LEVEL][specific error message]; return 0;

    - All tests should, when fully executed, completely restore the state of the system. 
      (For example, test in regions.c, which allocate memory regions, frees the regions before ending). 
      That way, normal boot can continue after tests.
